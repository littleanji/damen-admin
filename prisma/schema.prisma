generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Tenant {
  id          String    @id @default(cuid())
  name        String    @unique
  code        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  startTime   DateTime?
  endTime     DateTime?
  isActive    Boolean   @default(true)
  isDel       Boolean   @default(false)

  @@index([code], name: "tenant_code_idx")
  @@index([name], name: "tenant_name_idx")
  @@index([isActive, isDel], name: "tenant_status_idx")
  @@index([endTime], name: "tenant_end_time_idx")
}

model User {
  id          String       @id @default(cuid())
  username    String
  name        String
  password    String
  email       String?
  phone       String?
  isAdmin     Boolean      @default(false)
  tenantId    String?
  roles       Role[]       @relation("UserRoles")
  permissions Permission[]
  createdAt   DateTime     @default(now())
  lastLoginAt DateTime?
  isActive    Boolean      @default(true)
  updatedAt   DateTime     @updatedAt
  isDel       Boolean      @default(false)

  @@index([username], name: "user_username_idx")
  @@index([tenantId, isDel], name: "user_tenant_status_idx")
  @@index([email], name: "user_email_idx")
  @@index([phone], name: "user_phone_idx")
}

model Role {
  id          String       @id @default(cuid())
  name        String
  description String?
  tenantId    String?
  users       User[]       @relation("UserRoles")
  permissions Permission[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([name], name: "role_name_idx")
  @@index([tenantId], name: "role_tenant_status_idx")
}

model Menu {
  id       String  @id @default(cuid())
  name     String
  path     String  @unique
  icon     String?
  order    Int     @default(0)
  parent   Menu?   @relation("MenuChildren", fields: [parentId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  parentId String?
  children Menu[]  @relation("MenuChildren")
  tenantId String?

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Permission Permission[]

  @@index([path], name: "menu_path_idx")
  @@index([tenantId, parentId], name: "menu_parent_idx")
  @@index([order], name: "menu_order_idx")
}

model Permission {
  id        String         @id @default(cuid())
  type      PermissionType @default(USER)
  userId    String?
  roleId    String?
  menuId    String?
  actions   String[]
  dataScope Json?
  tenantId  String?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  user      User?          @relation(fields: [userId], references: [id])
  role      Role?          @relation(fields: [roleId], references: [id])
  menu      Menu?          @relation(fields: [menuId], references: [id])

  @@unique([type, roleId, menuId], name: "type_roleId_menuId")
  @@unique([type, userId, menuId], name: "type_userId_menuId")
  @@unique([type, userId, roleId], name: "permission_unique_constraint")
  @@index([userId, menuId], name: "permission_user_menu_idx")
  @@index([roleId, menuId], name: "permission_role_menu_idx")
}

enum PermissionType {
  USER
  ROLE
}
